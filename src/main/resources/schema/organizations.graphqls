type Query {
    """
    The paginated list of organizations that a user belongs to. If it is possible to
    determine the organizations that a user belonged to at a given time, use the `at`
    parameter. The "default" organization that is selected for a user is the first organization
    returned.
    """
    userOrganizationsPages(
        user: User!
        at: DateTime
        after: String
        first: Int = 100
        before: String
        last: Int
    ): OrganizationConnection!

    """
    Return a commit message for this repository given an input commit message.

    This is useful for if you need to supply, for example, a ticket number in each commit.
    """
    commitMessage(
        commitInput: CommitInput!
        repository: RepositoryInput!
    ): Commit!
}

input CommitInput {
    message: String!
    extendedMessage: String
}

input User {
    email: String!
}

type Organization {
    id: ID!
}

type Commit {
    message: String!
    extendedMessage: String
}

type OrganizationConnection {
    edges: [OrganizationEdge]
    pageInfo: PageInfo
    count: Int
}

type OrganizationEdge {
    node: Organization
    cursor: String
}

# Pagination Type - Generic
type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String
    endCursor: String
}

input RepositoryInput {
    path: String!
    origin: String
    branch: String
}

scalar DateTime
"""
Objects are generic types that serialize to JSON as `string`, `number`, or `boolean`.
"""
scalar Object
